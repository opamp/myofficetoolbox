#+TITLE: myofficetoolbox
#+AUTHOR: opamp_sando
#+OPTIONS: ^:{}

* 概要

お仕事するときにちょっと作ったり使ったりした自作ツール置き場。
会社で実行する必要がある関係で、大抵powershellかpythonかEmacs Lispになる。

* 入ってるツール情報

** codesize
*** 概要

指定したファイルまたはディレクトリに含まれる特定ファイルのサイズと行数をカウントするPowershellスクリプト。
出力は各ファイル毎及び全ファイル合計が出力される。

*** 使い方

#+BEGIN_SRC 
$ codesize.ps1 TARGETS TARGET_INCLUDE EXCLUDE_PATTERN TRIM CSV RESOLVE
#+END_SRC

**** TARGETS

対象ファイルまたはディレクトリを指定する。配列でも指定可能。

dir1を対象とする場合
#+BEGIN_SRC 
$ codesize.ps1 dir1
#+END_SRC

dir1とdir2を対象とする場合
#+BEGIN_SRC 
$ codesize.ps1 dir1,dir2
#+END_SRC

**** TARGET_INCLUDE

TARGETSに指定したファイル/ディレクトリを絞り込むパターンを指定する。配列でも指定可能。
また、指定を省略するとすべてのファイルが対象となる。

拡張子がcのファイルのみdir1から探して対象とする場合
#+BEGIN_SRC 
$ codesize.ps1 dir1 *.c
#+END_SRC

拡張子がcとhのファイルのみdir1から探して対象とする場合
#+BEGIN_SRC 
$ codesize.ps1 dir1 *.c,*.h
#+END_SRC

**** EXCLUDE_PATTERN

対象ファイルのうち、除外行のパターンを指定する。配列でも指定可能。
また、指定を省略すると除外は行わず、対象ファイルの全行が対象となる。

C言語のコメント//から始まる行を除外する場合
#+BEGIN_SRC 
$ codesize.ps1 dir1 *.c,*.h "^\s*//"
#+END_SRC

**** TRIM

指定されると、空行を削除した行数をカウントする。容量に対しては操作しない。

#+BEGIN_SRC 
$ codesize.ps1 dir1 -trim
#+END_SRC

#+BEGIN_SRC 
$ codesize.ps1 dir1 *.c,*.h "^\s*//" -trim
#+END_SRC

**** CSV

出力形式をCSV形式にする。指定しない場合はUNIXのwcに近い形式になる。

#+BEGIN_SRC 
$ codesize.ps1 dir1,dir2 -csv
#+END_SRC

**** RESOLVE

出力時のファイル名を絶対PATHにする。指定しない場合は相対PATHとして出力される

#+BEGIN_SRC 
$ codesize.ps1 dir1,dir2 -resolve
#+END_SRC

#+BEGIN_SRC 
$ codesize.ps1 dir1,dir2 -csv -resolve
#+END_SRC
** ResourceTester

*** 概要

指定したコマンドの負荷情報を定期的に取得しcsvファイルに保存するスクリプト。最後に実行時間も表示する。

*** 使い方

#+BEGIN_SRC 
$ ResourceTester cpuusageon outputfile,time_outputfile interval cmd args...
#+END_SRC

- cpuusageon: CPU使用率をCSVに含めるか指定する($Trueまたは$False)
- outputfile: 出力ファイル名(csv形式になる)
- time_outputfile: [省略可]実行時間情報を出力するファイル名(csv形式になる)
- interval: 情報を取得する間隔(ms)
- cmd: 実行するコマンド名
- args: [省略可]コマンドに渡す引数

CPU使用率はGet-Counterで取得するように作成したが、取得時間がかかるのでCPU使用率を取得する場合、Intervalより長い時間がかかる可能性がある。
そのためInterval通りの間隔で計測できない可能性が高い。
また、Get-Counterは時々何故か取得に失敗するため、失敗した場合は-1が出力されるようにしている。(Windows初心者すぎて原因不明)

**** 例

#+BEGIN_SRC 
$ ResourceTester $False output.csv,timeinfo.csv 500 emacs main.c
#+END_SRC

** svnticketfiles
*** 概要

svnのlog情報から指定されたチケットIDのログ（コミット）のみを抽出し、そのコミットで変更された
ファイル一覧を表示する。

動作としては、下記のコマンドで出力される関連コミットを取得する。

#+begin_src 
$ svn log --search "#{ticketID}"
#+end_src

その後、関連のリビジョン番号Xそれぞれについて下記のコマンドを実行する。

#+begin_src 
$ svn diff -r rX:PREV --summarize
#+end_src

これによって出力されるファイルを一覧表示する。

*** 使い方

第一引数にチケットIDを入力する。また、スクリプトはカレントディレクトリで実行されるため、カレントディレクトリが対象リポジトリ内である必要がある。

#+begin_src 
$ ./svnticketfiles 1020
#+end_src

* License

License.txtを参照
(See License.txt
